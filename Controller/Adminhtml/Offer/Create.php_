<?php

declare(strict_types=1);

namespace OneMoveTwo\Offers\Controller\Adminhtml\Offer;

use Magento\Backend\App\Action\Context;
use Magento\Catalog\Helper\Product;
use Magento\Framework\Escaper;
use Magento\Framework\View\Result\PageFactory;
use Magento\Backend\Model\View\Result\ForwardFactory;
use OneMoveTwo\Offers\Model\Data\OfferFactory;
use Magento\Customer\Model\CustomerFactory;
use Magento\Customer\Model\AddressFactory;
use Magento\Quote\Model\CustomerManagement;
use OneMoveTwo\Offers\Model\Admin\OfferCreator;
use Cart2Quote\Quotation\Model\QuoteCartManagement;
use Magento\Framework\Exception\LocalizedException;
use Magento\Backend\Model\View\Result\Redirect;
use OneMoveTwo\Offers\Model\Data\Offer;
use OneMoveTwo\Offers\Api\OfferRepositoryInterface;

class Create extends \Magento\Sales\Controller\Adminhtml\Order\Create\Save
{
    public function __construct(
        Context $context,
        Product $productHelper,
        Escaper $escaper,
        PageFactory $resultPageFactory,
        ForwardFactory $resultForwardFactory,
        private readonly OfferFactory $offerFactory,
        private readonly CustomerFactory $customerFactory,
        private readonly AddressFactory $addressFactory,
        private readonly CustomerManagement $customerManagement,
        private readonly OfferCreator $offerCreator,
        private readonly OfferRepositoryInterface $offerRepository,
        private readonly QuoteCartManagement $quoteCartManagement
    ) {
        parent::__construct(
            $context,
            $productHelper,
            $escaper,
            $resultPageFactory,
            $resultForwardFactory
        );
    }

    /**
     * Based on: \Magento\Sales\Controller\Adminhtml\Order\Create\Save::execute
     */
    public function execute()
    {
        //die('fffffffffffffffffffffffffffffff');
        /** @var Redirect $resultRedirect */
        $resultRedirect = $this->resultRedirectFactory->create();
        try {
            // check if the creation of a new customer is allowed
            if (!$this->_authorization->isAllowed('Magento_Customer::manage')
                && !$this->_getSession()->getCustomerId()
                && !$this->_getSession()->getQuote()->getCustomerIsGuest()
            ) {
                return $this->resultForwardFactory->create()->forward('denied');
            }

            $this->_getOrderCreateModel()->getQuote()->setCustomerId($this->_getSession()->getCustomerId());
            $this->_processActionData('save');
            $paymentData = $this->getRequest()->getPost('payment');
            if ($paymentData) {
                $paymentData['checks'] = [
                    \Magento\Payment\Model\Method\AbstractMethod::CHECK_USE_INTERNAL,
                    \Magento\Payment\Model\Method\AbstractMethod::CHECK_USE_FOR_COUNTRY,
                    \Magento\Payment\Model\Method\AbstractMethod::CHECK_USE_FOR_CURRENCY,
                    \Magento\Payment\Model\Method\AbstractMethod::CHECK_ORDER_TOTAL_MIN_MAX,
                    \Magento\Payment\Model\Method\AbstractMethod::CHECK_ZERO_TOTAL,
                ];
                $this->_getOrderCreateModel()->setPaymentData($paymentData);
                $this->_getOrderCreateModel()->getQuote()->getPayment()->addData($paymentData);
            }

            //validate the quotedata
            $this->_validate();

            //prepare the quote
            $quoteCreateModel = $this->_getOrderCreateModel()
                ->setIsValidate(true)
                ->importPostData($this->getRequest()->getPost('order'));

            //first unset customer is guest before preparing the customer
            // at this point the customer is created in the backend so it can't be a guest
            $quoteCreateModel->getQuote()->setCustomerIsGuest('0');

            //prepare the customer data
            $quoteCreateModel->_prepareCustomer();

            $quote = $quoteCreateModel->getQuote();
            $customer = $quote->getCustomer();
            if ($customer) {
                if ($customer->getId() == null) {
                    //New customer gets created
                    //Customer registration email is also sent by this function
                    $this->customerManagement->populateCustomerInfo($quote);
                    $quoteCreateModel->getQuote()->updateCustomerData($quoteCreateModel->getQuote()->getCustomer());
                }
            }

            // Set customer quote
            $quoteCreateModel->setQuote($this->quoteCartManagement->setCustomerQuote($quote));

            //save the quote
            $quote = $quoteCreateModel->saveQuote();

            //get quote id
            $quoteId = $quote->getQuote()->getId();

            //load quote based on quote id (to check later if it already exists)
            $offer = $this->offerFactory->create()->load($quoteId);

            //create the quotation quote if it doesn't already exist
            if (!$offer->getId()) {
                /** @var Offer $offerModel */
                $offer = $this->offerFactory->create();
                $offer->setCustomerId($customer->getId())
                    ->setStoreId($quote->getStoreId())
                    ->setCustomerEmail($customer->getEmail())
                    ->setAdminCreatorId((int)$this->offerCreator->getOfferCreator())
                    ->setCustomerName($customer->getName())
                    ->setCustomerIsGuest(false)
                    ->setQuoteId($quoteId);

                $this->offerRepository->save($offer);
                $this->_getSession()->clearStorage();
                $this->messageManager->addSuccessMessage(__('You created the offer.'));
                $this->_eventManager->dispatch('admin_offers_offer_create_after', ['offer' => $offer]);
            } else {
                $this->_getSession()->clearStorage();
                $this->offerRepository->save($offer);
                $this->messageManager->addSuccessMessage(__('You updated the quote.'));
            }

            $this->_getSession()->clearStorage();

            if ($this->_authorization->isAllowed('OneMoveTwo_Offers::actions_view')) {
                $resultRedirect->setPath('offers/offer/view', ['offer_id' => $offer->getId()]);
            } else {
                $resultRedirect->setPath('offers/offer/index');
            }
        } catch (\Magento\Framework\Exception\PaymentException $e) {
            $this->_getOrderCreateModel()->saveQuote();
            $message = $e->getMessage();
            if (!empty($message)) {
                $this->messageManager->addErrorMessage($message);
            }
            $resultRedirect->setPath('offers/offer_create');
        } catch (\Magento\Framework\Exception\LocalizedException $e) {
            $message = $e->getMessage();
            if (!empty($message)) {
                $this->messageManager->addErrorMessage($message);
            }
            $resultRedirect->setPath('offers/offer_create');
        } catch (\Exception $e) {
            $this->messageManager->addExceptionMessage($e, __('Offer saving error: %1', $e->getMessage()));
            $resultRedirect->setPath('offers/offer_create');
        }

        return $resultRedirect;
    }

    /**
     * Validate
     *
     * @throws LocalizedException
     */
    protected function _validate(): static
    {
        $customerId = $this->_getOrderCreateModel()->getSession()->getCustomerId();
        if ($customerId === null) {
            throw new LocalizedException(__('Please select a customer'));
        }

        if (!$this->_getOrderCreateModel()->getSession()->getStore()->getId()) {
            throw new LocalizedException(__('Please select a store'));
        }

        if (!empty($this->_errors)) {
            foreach ($this->_errors as $error) {
                $this->messageManager->addErrorMessage($error);
            }
            throw new LocalizedException(__('Validation is failed.'));
        }

        return $this;
    }
}
